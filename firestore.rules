rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is participant in conversation
    function isParticipant(conversationId) {
      return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // Only the user can write their own profile
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Only participants can read conversations
      allow read: if isAuthenticated() && isParticipant(conversationId);
      
      // Only participants can write to conversations
      allow write: if isAuthenticated() && isParticipant(conversationId);
      
      // Messages subcollection
      match /messages/{messageId} {
        // Anyone in the conversation can read messages
        allow read: if isAuthenticated() && isParticipant(conversationId);
        
        // Only sender can create a message
        allow create: if isAuthenticated() 
                      && request.auth.uid == request.resource.data.senderId
                      && isParticipant(conversationId);
        
        // Only participants can update message status/receipts
        // Limit updates to only status, deliveredTo, and readBy fields
        allow update: if isAuthenticated() 
                      && isParticipant(conversationId)
                      && request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'deliveredTo', 'readBy']);
        
        // No one can delete messages
        allow delete: if false;
      }
    }
    
    // Typing indicators collection (if implemented in future)
    match /typing/{typingId} {
      allow read, write: if isAuthenticated();
    }
  }
}

